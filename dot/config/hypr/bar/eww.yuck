;; Variables
(defpoll clock_time :interval "30s" "date +\%l")
(defpoll clock_minute :interval "5s" "date '+\%M \%p'")
(defpoll clock_date :interval "10h" "date '+%b %d, %Y'")
(defpoll volume_percent :interval "3s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll mic_percent :interval "3s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll brightness_percent :interval "5s" "light")
(defpoll battery :interval "15s" "scripts/battery --bat")
(defpoll battery_status :interval "1m" "scripts/battery --bat-st")
(defpoll memory :interval "15s" "scripts/memory")
(defpoll memory_used_mb :interval "2m" "scripts/mem-ad used")
(defpoll memory_total_mb :interval "2m" "scripts/mem-ad total")
(defpoll memory_free_mb :interval "2m" "scripts/mem-ad free")
(defvar vol_reveal false)
(defvar br_reveal false)
(defvar music_reveal false)
(defvar wifi_rev false)
(defvar time_rev false)
(deflisten workspace "scripts/workspace")

(defvar eww "eww -c $HOME/.config/hypr/bar")


(defpoll COL_WLAN :interval "1m" "scripts/wifi --COL")
(defpoll ESSID_WLAN :interval "1m" "scripts/wifi --ESSID")
(defpoll WLAN_ICON :interval "1m" "scripts/wifi --ICON")


(defpoll song :interval "2s"  "scripts/music_info --song")
(defpoll song_artist :interval "2s"  "scripts/music_info --artist")
(defpoll current_status :interval "1s"  "scripts/music_info --time")
(defpoll song_status :interval "2s"  "scripts/music_info --status")
(defpoll cover_art :interval "2s"  "scripts/music_info --cover")

(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")

;; widgets

(defwidget wifi []
  (eventbox :onhover "${eww} update wifi_rev=true"
        :onhoverlost "${eww} update wifi_rev=false"
    (box :vexpand "false" :hexpand "false" :space-evenly "false"
        (button :class "module-wif" :onclick "networkmanager_dmenu -no-default-config" :wrap "false" :limit-width 12 WLAN_ICON)
  (revealer :transition "slideright"
        :reveal wifi_rev
        :duration "350ms"
  (label    :class "module_essid"
        :text ESSID_WLAN
        :orientation "h"
        )))))


(defwidget workspaces []
  (literal :content workspace))


(defwidget bat []
    (box :class "bat_module" :vexpand "false" :hexpand "false"
            (progress :value battery
                :class "batbar"
                :thickness 4
            (button
                :class "iconbat"
                :limit-width 2
                :tooltip "battery on ${battery}%"
                :show_truncated false
                :onclick "scripts/pop system"
                :wrap false
                ""))))


(defwidget mem []
    (box :class "mem_module" :vexpand "false" :hexpand "false"
            (progress :value memory
                :class "membar"
                :thickness 4
            (button
                :class "iconmem"
                :limit-width 2
                :tooltip "using ${memory}% ram"
                :onclick "scripts/pop system"
                :show_truncated false
                :wrap false
                ""))))



(defwidget sep []
  (box :class "module-2" :vexpand "false" :hexpand "false"
    (label :class "separ" :text "|")))

(defwidget clock_module []
  (eventbox :onhover "${eww} update time_rev=true"
        :onhoverlost "${eww} update time_rev=false"
    (box :class "module" :space-evenly "false" :orientation "h" :spacing "0"
      (label :text clock_time :class "clock_time_class" )
      (label :text "" :class "clock_time_sep" )
      (label :text clock_minute :class "clock_minute_class")
    (revealer :transition "slideright"
        :reveal time_rev
        :duration "350ms"
      (button :class "clock_date_class"
             :onclick "scripts/pop calendar" clock_date
        )
  ))))

(defwidget volume []
  (eventbox :onhover "${eww} update vol_reveal=true"
        :onhoverlost "${eww} update vol_reveal=false"
  (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3"
  (button   :onclick "scripts/pop audio"   :class "volume_icon" "墳")
  (revealer :transition "slideleft"
        :reveal vol_reveal
        :duration "350ms"
  (scale    :class "volbar"
        :value volume_percent
        :orientation "h"
        :tooltip "${volume_percent}%"
        :max 100
        :min 0
        :onchange "amixer -D pulse sset Master {}%" )))))

(defwidget launcher []
  (box :class "launcher_module" :orientation "h"
   (button :onclick "QT_QPA_PLATFORMTHEME=qt5ct XDG_CACHE_HOME=~/.cache fuzzel -b 000000BB -t FFFFFFFF -f 'Inter Nerd Font' -i Tela --show-actions -C 53E2AEFF -B 2 -m EE4F84FF -p 20 --letter-spacing=1 -y 10 &" :class "iconlauncher" "")
   (button :onclick "wofi -show 'Global Search' -modi 'Global Search':$HOME/.config/hypr/rofi/global/rofi-spotlight.sh -theme $HOME/.config/hypr/rofi/global/rofi.rasi &" :class "iconsearch" "")
   ))

(defwidget bright []
  (eventbox :onhover "${eww} update br_reveal=true" :onhoverlost "${eww} update br_reveal=false"
  (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3"
    (label :text "" :class "bright_icon" :tooltip "brightness")
  (revealer :transition "slideleft"
        :reveal br_reveal
        :duration "350ms"
  (scale    :class "brightbar"
        :value brightness_percent
        :orientation "h"
        :tooltip "${brightness_percent}%"
        :max 100
        :min 0
        :onchange "brightnessctl set {}%" )))))



  ;;  Music
(defwidget music []
  (eventbox :onhover "${eww} update music_reveal=true"
        :onhoverlost "${eww} update music_reveal=false"
    (box :class "module-2" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (box :class "song_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
      (button :class "song" :wrap "true" :onclick "scripts/pop music" song)
      (revealer :transition "slideright"
            :reveal music_reveal
            :duration "350ms"
          (box :vexpand "false" :hexpand "false" :oreintation "h"
                    (button :class "song_btn_prev" :onclick "scripts/music_info --prev" "")
          (button :class "song_btn_play" :onclick "scripts/music_info --toggle" song_status)
          (button :class "song_btn_next" :onclick "scripts/music_info --next" ""))))))

(defwidget gap []
  (box :orientation "h"
      :hexpand "false"
      :visible "true"
      :width "150"
    ))


(defwidget left []
  (box :orientation "h"
     :space-evenly false
         :halign "start"
     :class "left_modules"
(launcher)
(sep)
(workspaces)
))


(defwidget center []
  (box :orientation "h"
     :space-evenly false
         :halign "center"
     :class "center_modules"
(music)))


(defwidget right []
  (box :orientation "h"
     :space-evenly false
         :halign "end"
     :class "right_modules"
(bright)
(volume)
(wifi)
;(sep)
;(bat)
;(mem)
(sep)
(clock_module)
))

(defwidget bar_1 []
  (box :class "bar_class"
       :orientation "h"
       :width "1900px"
  (left)
  (center)
  (right)
    ))


(defwindow bar
          :exclusive false
          :monitor 0
          :geometry (geometry
                       :x "15px"
                       :y "9px"
                       :width "1888px"
                       :height "30px"
                       :anchor "top center")
          :stacking "bg"
          :windowtype "dock"
  (bar_1))

(defwidget system []
  (box :class "sys_win" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0
  (box :class "sys_bat_box" :orientation "h" :space-evenly "false"
      (progress :value battery
                :class "sys_bat"
                :thickness 9
            (label :text ""
                :class "sys_icon_bat"
                :limit-width 2
                :show_truncated false
                :wrap false))
            (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
            (label :text "battery"
                :halign "start"
                :class "sys_text_bat"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label :text "${battery}%"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            (label :text "${battery_status}"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)))
            (label :text "" :class "sys_sep" :halign "center")
  (box :class "sys_mem_box" :orientation "h" :space-evenly "false" :halign "start"
      (progress :value memory
                :class "sys_mem"
                :thickness 9
            (label :text ""
                :class "sys_icon_mem"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0))
            (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
            (label :text "memory"
                :halign "start"
                :class "sys_text_mem"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label :text "${memory_used_mb} | ${memory_total_mb}mb "
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            (label :text "${memory_free_mb}mb free"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)))))

(defwidget cal []
  (box :class "cal" :orientation "v"
  (box :class "cal-in"
  (calendar :class "cal"
        :day calendar_day
        :year calendar_year))))

(defwindow calendar :stacking "fg" :focusable "false" :screen 1
  :monitor 0
  :geometry (geometry
            :x "20"
            :y "7%"
                        :anchor "top right"
            :width "270px"
            :height "60px")
(cal))



(defwidget audio []
  (box :class "audio-box" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
  (box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
  (box :class "speaker_icon" :orientation "v")
  (box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
    (label :class "speaker_text" :text "speaker" :valign "center" :halign "left" )
  (box :class "speaker_bar" :halign "center" :vexpand "false" :hexpand "false"
  (scale    :value volume_percent
              :space-evenly "false"
        :orientation "h"
        :onchange "amixer -D pulse sset Master {}%"
              :tooltip "volume on ${volume_percent}%"
        :max 100
        :min 0))))
            (label :text "" :class "audio_sep" :halign "center")
  (box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
  (box :class "mic_icon" :orientation "v")
  (box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
    (label :class "mic_text" :text "mic" :valign "center" :halign "left" )
  (box :class "mic_bar" :halign "center" :vexpand "false" :hexpand "false"
  (scale    :value mic_percent
              :space-evenly "false"
        :orientation "h"
              :tooltip "mic on ${mic_percent}%"
        :onchange "amixer -D pulse sset Capture {}%"
        :max 100
        :min 0))))))

(defwindow audio_ctl :stacking "fg" :focusable "false" :screen 1
  :monitor 0
  :geometry (geometry
            :x "20"
            :y "7%"
                        :anchor "top right"
            :width "280px"
            :height "60px")
(audio))


(defwindow system :stacking "fg" :focusable "false" :screen 1
  :monitor 0
  :geometry (geometry
            :x "20"
            :y "7%"
                        :anchor "top right"
            :width "290px"
            :height "120px")
(system))



;;  Music
(defwidget music_pop []
    (box :class "music_pop" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (box :class "music_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
      (box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :halign "center" :class "music" :wrap "true" :limit-width 13 :text song)
        (label :halign "center" :class "music_artist" :wrap "true" :limit-width 15 :text song_artist)
        (box :orientation "h" :spacing 15 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
          (button :class "music_btn_prev" :onclick "scripts/music_info --prev" "")
          (button :class "music_btn_play" :onclick "scripts/music_info --toggle" song_status)
          (button :class "music_btn_next" :onclick "scripts/music_info --next" ""))
        (box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" :space-evenly "false"
          (scale :onscroll "mpc -q seek {}" :min 0 :active "true" :max 100 :value current_status)))))


;;  music
    (defwindow music_win :stacking "fg" :focusable "false" :screen 1
          :monitor 0
          :geometry (geometry
                    :x "0"
                    :y "7%"
                    :width 428
                    :height 104
                    :anchor "top center")
(music_pop))

